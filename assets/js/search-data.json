{
  
    
        "post0": {
            "title": "파이썬 3월 23일 강의 복습",
            "content": "&#46357;&#49492;&#45320;&#47532;(&#50672;&#49328;,&#47700;&#49548;&#46300;) , &#46357;&#49492;&#45320;&#47532; &#44256;&#44553;, &#51665;&#54633; (&#49440;&#50616;,&#50896;&#49548;&#52628;&#44032;,&#50896;&#49548;&#49325;&#51228;,&#50672;&#49328;,&#47700;&#49548;&#46300;,for&#47928;) . June 29,2022 | . &#46357;&#49492;&#45320;&#47532; . &#50672;&#49328; . score={&#39;seokjin&#39;:90,&#39;iu&#39;:80} score . {&#39;seokjin&#39;: 90, &#39;iu&#39;: 80} . &#39;seokjin&#39; in score . True . &#39;jk&#39; in score . False . - in은 사실 다른 자료형에서도 가능한 연산임 . (관찰1) . &#39;a&#39; in &#39;seokjin&#39; . False . &#39;j&#39; in &#39;seokjin&#39; . True . (관찰2) . tpl=1,2,3 tpl . (1, 2, 3) . 1 in tpl . True . 5 in tpl . False . (관찰3) . score=[[&#39;seokjin&#39;,90],[&#39;iu&#39;,80],[&#39;jk&#39;,70]] score . [[&#39;seokjin&#39;, 90], [&#39;iu&#39;, 80], [&#39;jk&#39;, 70]] . [&#39;seokjin&#39;,90] in score . True . &#47700;&#49548;&#46300; . (get) . score={&#39;seokjin&#39;:90,&#39;iu&#39;:80} score . {&#39;seokjin&#39;: 90, &#39;iu&#39;: 80} . score.get(&#39;seokjin&#39;) . 90 . score[&#39;seokjin&#39;] #위와 같은 기능 . 90 . 둘 사이의 차이점이 존재 . score[&#39;jk&#39;] #jk가 없어서 key error 발생 . KeyError Traceback (most recent call last) Input In [16], in &lt;cell line: 1&gt;() -&gt; 1 score[&#39;jk&#39;] KeyError: &#39;jk&#39; . score.get(&#39;jk&#39;) #jk가 없으면 아무것도 출력하지 않음 . (keys,values,items) . - .keys() 는 딕셔너리의 키를 리턴 . score={&#39;seokjin&#39;:90,&#39;iu&#39;:80} score . {&#39;seokjin&#39;: 90, &#39;iu&#39;: 80} . _keys=score.keys() _keys #return된 자료형은 우리가 알수 없는 자료형임.. . dict_keys([&#39;seokjin&#39;, &#39;iu&#39;]) . list(_keys) . [&#39;seokjin&#39;, &#39;iu&#39;] . - .values() 는 딕셔너리의 값들을 리턴 . _values=score.values() _values . dict_values([90, 80]) . list(_values) . [90, 80] . - .items()는 딕셔너리의 (키,값)을 리턴. . _items=score.items() _items . dict_items([(&#39;seokjin&#39;, 90), (&#39;iu&#39;, 80)]) . list(_items) . [(&#39;seokjin&#39;, 90), (&#39;iu&#39;, 80)] . - for문에서의 딕셔너리 . for i in score.keys(): print(i) . seokjin iu . for i in score: print(i) . seokjin iu . 딕셔너리 그 자체도 for문에 넣을 수 있음. | i에는 value가 삭제되어 들어감. (즉 key만 들어감) | 결과를 보면 score대신에 score.keys()와 list(score)를 넣었을 때와 결과가 같음. | . list(score) 하면 key만 리턴 . for i in score.values(): print(i) . 90 80 . for k in score.items(): print(k) . (&#39;seokjin&#39;, 90) (&#39;iu&#39;, 80) . for i,j in score.items(): print(i,j) . seokjin 90 iu 80 . for i,j in score.items(): print(i+ &#39;의 중간고사 점수는 %s점 입니다.&#39; %j) . seokjin의 중간고사 점수는 90점 입니다. iu의 중간고사 점수는 80점 입니다. . &#46357;&#49492;&#45320;&#47532; &#44256;&#44553; . key&#45716; &#47928;&#51088;&#50676;&#47564; &#44032;&#45733;&#54620; &#44163;&#51060; &#50500;&#45784;. . - 정수key . score={0:90,1:80,2:70} #key -&gt; 0,1,2 score . {0: 90, 1: 80, 2: 70} . - 인덱싱은? . score[0] . 90 . score[:2] #스트라이딩은 불가능.. . TypeError Traceback (most recent call last) Input In [38], in &lt;cell line: 1&gt;() -&gt; 1 score[:2] TypeError: unhashable type: &#39;slice&#39; . key&#44050;&#51004;&#47196; &#44032;&#45733;&#54620; &#44163;? &#47928;&#51088;&#50676;, &#49707;&#51088;&#44050;, &#53916;&#54540; . score={(&#39;seokjin&#39;,0):20,(&#39;seokjin&#39;,1):80,(&#39;seokjin&#39;,2):90} #0은 출석점수 , 1은 중간점수, 2는 기말 점수 score . {(&#39;seokjin&#39;, 0): 20, (&#39;seokjin&#39;, 1): 80, (&#39;seokjin&#39;, 2): 90} . score[(&#39;seokjin&#39;,0)] . 20 . score[(&#39;seokjin&#39;,3)]=10 #seokjin의 레포트 점수를 추가 . score . {(&#39;seokjin&#39;, 0): 20, (&#39;seokjin&#39;, 1): 80, (&#39;seokjin&#39;, 2): 90, (&#39;seokjin&#39;, 3): 10} . 문자열, 숫자값, 튜플의 공통점? 불변객체 | . &#52280;&#44256; (&#48520;&#48320;&#54805;&#44284; &#44032;&#48320;&#54805;) . (인트형 불변) . a=1 a,id(a) . (1, 140516834601264) . a=2 a,id(a) . (2, 140516834601296) . (문자열 불변) . a=&#39;seokjin&#39; a,id(a) . (&#39;seokjin&#39;, 140516301124528) . a=&#39;Seokjin&#39; a,id(a) . (&#39;Seokjin&#39;, 140516575460080) . (리스트 가변) . a=list(&#39;seokjin&#39;) a,id(a) . ([&#39;s&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;], 140516434678784) . a[0]=&#39;G&#39; . a,id(a) . ([&#39;G&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;], 140516434678784) . &#51665;&#54633; . &#49440;&#50616; . a={&#39;notebook&#39;,&#39;desktop&#39;} . &#50896;&#49548;&#52628;&#52636; . 하는 방법 없음 | 하는 의미도 없음 (원소에 접근해서 할 수 있는 게 없음...) | . a={&#39;notebook&#39;,&#39;desktop&#39;} a[0] . TypeError Traceback (most recent call last) Input In [54], in &lt;cell line: 2&gt;() 1 a={&#39;notebook&#39;,&#39;desktop&#39;} -&gt; 2 a[0] TypeError: &#39;set&#39; object is not subscriptable . &#50896;&#49548;&#52628;&#44032; . a={&#39;notebook&#39;,&#39;desktop&#39;} a . {&#39;desktop&#39;, &#39;notebook&#39;} . a.add(&#39;ipad&#39;) a . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . a.add(&#39;notebook&#39;) #이미 있는 원소는 추가되지 않음 -&gt; 중복허용하지 않음 a . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . &#50896;&#49548;&#49325;&#51228; . a={&#39;desktop&#39;,&#39;ipad&#39;,&#39;notebook&#39;} a . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . a.remove(&#39;notebook&#39;) . a . {&#39;desktop&#39;, &#39;ipad&#39;} . &#50672;&#49328; . - in 연산자 . a={&#39;notebook&#39;,&#39;desktop&#39;,&#39;ipad&#39;} a . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . &#39;notebook&#39; in a . True . 돌이켜보면 in 연산자는 다른 곳에서도 쓰임 | . - 합집합,교집합,차집합 . day1={&#39;notebook&#39;,&#39;desktop&#39;} day2={&#39;notebook&#39;,&#39;ipad&#39;} . day1 | day2 #합집합 . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . day1 &amp; day2 #교집합 . {&#39;notebook&#39;} . day1-day2 #차집합 . {&#39;desktop&#39;} . day2-day1 #차집합 . {&#39;ipad&#39;} . - 부분집합 . day1={&#39;notebook&#39;,&#39;desktop&#39;} day2=day1|{&#39;ipad&#39;} . day1&lt;day2 #day1는 day2의 부분집합인가? . True . day2&lt;day1 . False . &#47700;&#49548;&#46300; . - 합집합 . day1={&#39;notebook&#39;,&#39;desktop&#39;} day2={&#39;notebook&#39;,&#39;ipad&#39;} . day1.union(day2) . {&#39;desktop&#39;, &#39;ipad&#39;, &#39;notebook&#39;} . day1.intersection(day2) . {&#39;notebook&#39;} . 여러 메소드가 존재함... | . for&#47928; . day1={&#39;notebook&#39;,&#39;desktop&#39;} day2={&#39;notebook&#39;,&#39;ipad&#39;} . for i in day1|day2: print(i) . ipad notebook desktop .",
            "url": "https://sjinc.github.io/PyIntro-2022-1/python/2022/06/29/%EA%B0%95%EC%9D%98-%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/python/2022/06/29/%E1%84%80%E1%85%A1%E1%86%BC%E1%84%8B%E1%85%B4-%E1%84%87%E1%85%A9%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8.html",
            "date": " • Jun 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sjinc.github.io/PyIntro-2022-1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Python 과목 성적 . - A+ . Python 과목 공부 이유 . - AI Engineer가 되기 위해.. . Python 과목 공부를 위한 참고 자료들 . - 전북대학교 통계학과 최규빈 교수님 강의 . - 점프 투 파이썬 https://wikidocs.net/book/1 . - https://jakevdp.github.io/PythonDataScienceHandbook/ . - 효율적 개발로 이끄는 파이썬 실천 기술 . - Learning python : powerful object-oriented programming . - 전문가를 위한 파이썬 : 파이썬3 버전 기준 | 간단하고, 명료하고, 효율적인 파이썬 프로그래밍 | . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sjinc.github.io/PyIntro-2022-1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sjinc.github.io/PyIntro-2022-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}