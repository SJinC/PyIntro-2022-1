{
  
    
        "post0": {
            "title": "파이썬 3월 21일 강의 복습",
            "content": "&#53916;&#54540;&#51012; &#50416;&#45716; &#51060;&#50976;, &#49828;&#53944;&#46972;&#51060;&#46377;, if&#47928;&#51060; &#54252;&#54632;&#46108; &#52980;&#54532;&#47532;&#54760;&#49496;,&#51312;&#44148;&#48512;&#47532;&#53556;, len&#54632;&#49688;, summary, &#46357;&#49492;&#45320;&#47532;(&#49440;&#50616;,&#50896;&#49548;&#52628;&#52636;,&#50896;&#49548;&#52628;&#44032;,&#50896;&#49548;&#48320;&#44221;,&#49325;&#51228;) . june 26 ,2022 | . some minor comments : str, list, tuple . 튜플을 쓰는 이유 . - 교재의 설명 (파이썬에만 한정되는 것은 아님. 모든 언어에 존재하는 불변형객체에 적용가능한 설명) . 실수방지 | 빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다, 깊은복사/얕은복사시 원하지 않는 오류(side effect)를 방지, 메모리관리에도 유리 | 느낌 : 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은 풍부하지만 약간 느리고 무거운 느낌 | . - 교수님의 설명 . 튜플의 장점은 소괄호 생략에 있음 (파이썬&amp;줄리아만 가능) | 언패킹구문과 결합하여 엄청난 가독성을 제공 | . def mycal(a,b): return a+b,a-b,a*b,a/b #여러개의 값을 리턴하는 듯 하지만 -&gt; 사실은 길이가 4인 튜플 1개를 리턴 . mycal(3,5) . (8, -2, 15, 0.6) . _,_,mulresult,_=mycal(3,5) #병렬할당 . mulresult . 15 . - 튜플만 괄호를 생략할 수 있는 이유 . - 교수님의 의견 . 튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한 것은 아닐 것임 | 원래 괄호없이 콤마만 대충찍어서 선언가능한 아주간단한 타입의 벡터형을 만들고 싶었을 것임. | 왜? 괄호없는 벡터를 만들고 + 언패킹을 사용하면 여러가지 구문들이 간단해짐 | 콤마를 사용해 선언한 벡터는 어차피 일시적으로 사용하며 이름도 필요없음 $ to$ 원소에 접근해서 sorting하여 순서를 바꾸고 싶다던가 원소를 추가할 이유가 없음 $ to$ 가변형으로 굳이? | 우리가 필요한 것 : 데이터가 벡터의 형태로 모여있기만 하면 된다! | . &#51064;&#45937;&#49905;&#44256;&#44553; (&#49828;&#53944;&#46972;&#51060;&#46377;) . - 스트라이딩 [start:stop:step] . lst=list(&#39;abcdefgh&#39;) lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . lst[0:8:2] . [&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;g&#39;] . - 생략 . lst[::2] . [&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;g&#39;] . lst[0::2] . [&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;g&#39;] . lst[:8:2] . [&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;g&#39;] . - 예제: 짝수/홀수 원소 추출 . lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . lst[::2] . [&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;g&#39;] . lst[1::2] . [&#39;b&#39;, &#39;d&#39;, &#39;f&#39;, &#39;h&#39;] . - step=-1이면? . lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . lst[::-1] . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . reverse와 같은 기능 | . (reverse) 와 비교 . 관찰1:reverse 메소드는 리스트 자체를 변화시킴 . lst=list(&#39;abcdefgh&#39;) lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . lst.reverse() lst . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . 관찰2:[::-1]는 리스트를 변화시키지 않음 . lst=list(&#39;abcdefgh&#39;) lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . lst[::-1] . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . lst . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;] . (예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어 보기 . lst=list(&#39;abcdefgh&#39;) lst[::-1] . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . (풀이) 결국 lst[?:?:-1]의 꼴에서 적당히 ?의 값을 채우면 된다. 특히 가운데 칸에 무엇을 넣을 것인가가 관건! . lst[-1::-1] . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . lst[-1:-1:-1] #마지막 인덱스는 포함되지 않음! . [] . lst[-1:-9:-1] . [&#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . &#52980;&#54532;&#47532;&#54760;&#49496; &#44256;&#44553; (if&#47928;&#51060; &#54252;&#54632;&#46108; &#52980;&#54532;&#47532;&#54760;&#49496;) . - 예제: 제곱수중에서 12로 나누어 떨어지는 수 만 원소로 가지는 리스트를 만들고 싶다. . 제곱수 : 1,4,9,16,25,36,49.... | 12로 나누어 떨어지는 수 : 36,... | . &#54028;&#51060;&#50028;&#50640;&#49436; %&#45716; &#45208;&#47672;&#51648;&#47484; &#44228;&#49328;&#54616;&#45716; &#50672;&#49328;&#51088; . (풀이1) . lst=[] for i in range(1,101): if (i**2 % 12 ==0): lst.append(i**2) . lst . [36, 144, 324, 576, 900, 1296, 1764, 2304, 2916, 3600, 4356, 5184, 6084, 7056, 8100, 9216] . [i**2 for i in range(1,101) if (i**2 %12 ==0)] . [36, 144, 324, 576, 900, 1296, 1764, 2304, 2916, 3600, 4356, 5184, 6084, 7056, 8100, 9216] . &#54632;&#49688;&#44256;&#44553; (&#51312;&#44148;&#48512;&#47532;&#53556;) . - 홀수 / 짝수를 판별하는 함수 만들기 1 . def test(a): if a%2==0: return &#39;even&#39; else: return &#39;odd&#39; . test(1) . &#39;odd&#39; . test(2) . &#39;even&#39; . [test(i) for i in range(1,10)] . [&#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;] . - 홀수 / 짝수를 판별하는 함수 만들기 2 . def test(a): return &#39;even&#39; if a%2==0 else &#39;odd&#39; . [test(a) for a in range(1,10)] . [&#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;] . len&#54632;&#49688; . - 복습 . 0차원 자료형은 len함수가 동작하지 않는다 | . a=1 len(a) . TypeError Traceback (most recent call last) Input In [40], in &lt;cell line: 2&gt;() 1 a=1 -&gt; 2 len(a) TypeError: object of type &#39;int&#39; has no len() . a=True len(a) . TypeError Traceback (most recent call last) Input In [41], in &lt;cell line: 2&gt;() 1 a=True -&gt; 2 len(a) TypeError: object of type &#39;bool&#39; has no len() . a=2.41 len(a) . TypeError Traceback (most recent call last) Input In [42], in &lt;cell line: 2&gt;() 1 a=2.41 -&gt; 2 len(a) TypeError: object of type &#39;float&#39; has no len() . - 1차원 자료형은 len함수가 동작 . a=&#39;seokjin&#39; len(a) . 7 . a=[1,2,3,4,5,6] len(a) . 6 . a=1,2,3,4,5,6 len(a) . 6 . a=range(10) len(a) . 10 . 길이가 1인 1차원 자료형과 0차원 자료형은 다름! . a=&#39;s&#39; len(a) . 1 . a=[1] len(a) . 1 . a=(1,) len(a) . 1 . a=range(1) len(a) . 1 . - 길이가 0인 1차원 자료형도 존재 . a=&#39;&#39; len(a) . 0 . a=[] len(a) . 0 . a=() len(a) . 0 . a=range(0) len(a) . 0 . summary : str, list, tuple . - str,list,tuple은 모두 시퀀스형이라는 공통점이 있다. $ to$ 원소의 위치번호로 인덱싱이 가능 . lst=[1,2,3,4] . lst[0] #위치번호 = 0 . 1 . lst[-1] #위치번호 = -1 . 4 . - str,list,tuple은 차이점도 존재함. . 시퀀스형의 카테고리 . 컨테이너형 : list,tuple | 균일형 : str | 가변형 : list | 불변형 : tuple,str | . 표로 정리하면 . 컨테이너형 균일형 . 가변형 | list | | . 불변형 | tuple | str | . -시퀀스형이 아닌 1차원 자료형도 있을까?? -&gt; 원소의 위치번호로 인덱싱이 불가능한 자료형 . - 왜 이런게 필요할까? . 벡터에서 원소를 뽑는 것은 정보의 모임에서 정보를 검색하는 것과 같다. | 정보를 순서대로 나열한 뒤에 그 순서를 이용하여 검색하는 방법은 유용하다. | 하지만 경우에 따라서는 키워드를 기억해서 그 키워드를 바탕으로 정보에 접근하는 방법이 유용할 수 있다. | . - 즉, 순서대로 정리된 자료를 검색할 때는 시퀀스형이 유리하다. 그런데 키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다. . &#46357;&#49492;&#45320;&#47532; . &#49440;&#50616; . - 방법 1 . age={&#39;seokjin&#39;:26,&#39;iu&#39;:29} age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . type(age) . dict . - 방법 2 . age=dict(seokjin=26,iu=29) age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . type(age) . dict . - 방법 3 . _lst=[[&#39;seokjin&#39;,26],[&#39;iu&#39;,29]] _lst . [[&#39;seokjin&#39;, 26], [&#39;iu&#39;, 29]] . dict(_lst) . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . - 방법 4 . _tpl=(&#39;seokjin&#39;,26),(&#39;iu&#39;,29) _tpl . ((&#39;seokjin&#39;, 26), (&#39;iu&#39;, 29)) . dict(_tpl) . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . &#50896;&#49548;&#52628;&#52636; . age={&#39;seokjin&#39;:26,&#39;iu&#39;:29} age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . seokjin의 나이를 추출하고 싶으면? . age[0] #이렇게 하는게 아니라 . KeyError Traceback (most recent call last) Input In [75], in &lt;cell line: 1&gt;() -&gt; 1 age[0] KeyError: 0 . age[&#39;seokjin&#39;] . 26 . 만약 리스트로 저장했다면?? . age=[[&#39;seokjin&#39;,26],[&#39;iu&#39;,29]] . seokjin의 나이를 추출하고 싶다면? . (방법1) . age[0][1] #seokjin의 나이를 출력하라는 의미 . 26 . (방법2) . _keys=[age[i][0] for i in range(len(age))] #리스트컴프리헨션 _keys . [&#39;seokjin&#39;, &#39;iu&#39;] . [age[i][1] for i in range(len(age)) if age[i][0]==&#39;seokjin&#39;] . [26] . ... 사용하지 말자.. | . &#50896;&#49548;&#52628;&#44032;, &#48320;&#44221;, &#49325;&#51228; . age={&#39;seokjin&#39;:26,&#39;iu&#39;:29} age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . - 원소에 접근 . age[&#39;seokjin&#39;] . 26 . - 추가 . age[&#39;jk&#39;]=26 #추가 age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29, &#39;jk&#39;: 26} . - 변경 . age[&#39;seokjin&#39;]=25 #변경 age . {&#39;seokjin&#39;: 25, &#39;iu&#39;: 29, &#39;jk&#39;: 26} . - 삭제 . (방법1) . age={&#39;seokjin&#39;:26,&#39;iu&#39;:29,&#39;jk&#39;:26} del age[&#39;jk&#39;] age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . (방법2) . age={&#39;seokjin&#39;:26,&#39;iu&#39;:29,&#39;jk&#39;:26} age.pop(&#39;jk&#39;) . 26 . age . {&#39;seokjin&#39;: 26, &#39;iu&#39;: 29} . - 참고로 리스트였다면 이러한 삭제작업이 비효율적일 것임 . age=[[&#39;seokjin&#39;,26],[&#39;iu&#39;,29],[&#39;jk&#39;,26]] age . [[&#39;seokjin&#39;, 26], [&#39;iu&#39;, 29], [&#39;jk&#39;, 26]] . age=[[key,val] for key,val in age if key !=&#39;jk&#39;] age . [[&#39;seokjin&#39;, 26], [&#39;iu&#39;, 29]] .",
            "url": "https://sjinc.github.io/PyIntro-2022-1/python/2022/06/29/%EA%B0%95%EC%9D%98-%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/python/2022/06/29/%E1%84%80%E1%85%A1%E1%86%BC%E1%84%8B%E1%85%B4-%E1%84%87%E1%85%A9%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8.html",
            "date": " • Jun 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sjinc.github.io/PyIntro-2022-1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Python 과목 성적 . - A+ . Python 과목 공부 이유 . - AI Engineer가 되기 위해.. . Python 과목 공부를 위한 참고 자료들 . - 전북대학교 통계학과 최규빈 교수님 강의 . - 점프 투 파이썬 https://wikidocs.net/book/1 . - https://jakevdp.github.io/PythonDataScienceHandbook/ . - 효율적 개발로 이끄는 파이썬 실천 기술 . - Learning python : powerful object-oriented programming . - 전문가를 위한 파이썬 : 파이썬3 버전 기준 | 간단하고, 명료하고, 효율적인 파이썬 프로그래밍 | . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sjinc.github.io/PyIntro-2022-1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sjinc.github.io/PyIntro-2022-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}